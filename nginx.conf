worker_rlimit_nofile 8192;

events {
    worker_connections 4096;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_proxied any;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;

    # Кешируем файлы для I/O операций
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Добавляем подсчет статус-кодов с помощью map
    map $status $status_group {
        ~^2 "2xx";
        ~^3 "3xx";
        ~^4 "4xx";
        ~^5 "5xx";
    }

    map $status $status_2xx { default 0; ~^2 1; }
    map $status $status_3xx { default 0; ~^3 1; }
    map $status $status_4xx { default 0; ~^4 1; }
    map $status $status_5xx { default 0; ~^5 1; }

    server {
        listen 80;
        http2 on;

        server_name _;
        
        root /usr/share/nginx/html;

        index index.html;
        access_log /var/log/nginx/access.log combined buffer=32k flush=5s;
        error_log /var/log/nginx/error.log warn;
        real_ip_header X-Forwarded-For;
        set_real_ip_from 0.0.0.0/0;

        if ($http_user_agent ~* (wget|curl|libwww-perl|nikto|sqlmap|nmap|zgrab|python|java|httpclient)) {
            return 403;
        }

        if ($http_user_agent = "") {
            return 403;
        }

        # Блокировка запросов с большим количеством параметров
        if ($args ~* "(\\.\\./|\\0|%00|%0d%0a|%0a|%0d|%5c|%22|%27|%3c|%3e|%3f|%2f)") {
            return 403;
        }

        # Правила для SW и Workbox (требуют особых хедеров)
        location = /sw.js {
            add_header Service-Worker-Allowed /;
            add_header Content-Type application/javascript;
            add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0";
            add_header Pragma "no-cache";
            expires 0;
            access_log off;
            try_files $uri =404;
        }

        location ~* ^/(workbox-.*\.js)$ {
            add_header Service-Worker-Allowed /;
            add_header Content-Type application/javascript;
            add_header Cache-Control "public, max-age=31536000, immutable";
            access_log off;
            try_files $uri =404;
        }

        # Заглушка для использования SW. 
        # Next.js - для статического экспорта на создаёт файл автоматически, поэтому ставим заглушку,
        # иначе SW не регистрируется в браузере и падает в ошибку
        location /_next/app-build-manifest.json {
            add_header Content-Type application/json;
            return 200 '{}';
        }

        location /_next/static {
            alias /usr/share/nginx/html/_next/static;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location /static {
            alias /usr/share/nginx/html/static;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        location / {
            try_files $uri $uri.html $uri/ =404;
        }
        
        error_page 403 404 /404.html;
        location = /404.html {
            internal;
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location ~* \.(log|env|yml|yaml)$ {
            deny all;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }

    # Server block for Nginx status
    server {
        listen 81;
        server_name _;

        access_log off; # No need to log status requests
        # Расширяем доступ для локальной сети и других контейнеров
        allow 127.0.0.1;    # Local access
        allow 172.16.0.0/12; # Docker networks
        allow 192.168.0.0/16; # Docker networks
        allow 10.0.0.0/8;     # Docker networks
        deny all;             # Deny all other IPs

        # Стандартный stub_status для базовых метрик
        location /nginx_status {
            stub_status;
        }

        # Отдельный endpoint для детальных метрик с HTTP-статусами
        location /metrics {
            # Добавляем заголовок content-type для Prometheus
            default_type text/plain;
            return 200 'nginx_http_requests_total{status="2xx"} $status_2xx\nnginx_http_requests_total{status="3xx"} $status_3xx\nnginx_http_requests_total{status="4xx"} $status_4xx\nnginx_http_requests_total{status="5xx"} $status_5xx\n';
        }
    }
}
