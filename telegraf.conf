# Global Agent Configuration
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# Input Plugins based on your requirements

# Nginx status page
[[inputs.nginx]]
  urls = ["http://web:81/nginx_status"] # Use service name 'web' from docker-compose
  response_timeout = "5s"

# Nginx access log tailing
[[inputs.tail]]
  name_override = "nginxlog"
  files = ["/var/log/nginx/access.log"]
  from_beginning = false # Set to true if you need historical data on first run
  pipe = false
  data_format = "grok"
  grok_patterns = ["%{COMBINED_LOG_FORMAT}"]
  # Watch method depends on the filesystem and OS inside the container
  # watch_method = "inotify" # or "poll" if inotify doesn't work

# System metrics
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
[[inputs.diskio]]
[[inputs.mem]]
[[inputs.net]]
[[inputs.system]]

# Output Plugin: Prometheus Client
# This makes Telegraf listen on a port for Prometheus to scrape
[[outputs.prometheus_client]]
  # Telegraf will listen on this port *inside the container*
  listen = ":9273"
  # Path for Prometheus to scrape metrics from
  path = "/metrics"
  # Optional: Adjust expiration interval for metrics
  # expiration_interval = "60s"
  # Optional: Add specific tags to all metrics
  # [outputs.prometheus_client.tags]
  #   instance = "telegraf-nginx"

# Add other output plugins like InfluxDB or Prometheus here
# [[outputs.influxdb_v2]]
#   urls = ["http://influxdb:8086"] # Example, adjust URL
#   token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN" # Use environment variable
#   organization = "$DOCKER_INFLUXDB_INIT_ORG"  # Use environment variable
#   bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"     # Use environment variable 